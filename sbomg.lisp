#!/usr/bin/sbcl --script
;;; -*- Mode: Lisp -*-

;;; SBOMG.LISP (SBO MANAGER) -- A LISPY WAY TO MAINTAIN 3RD PARTY PACKAGES AVAILABLE AT SLACKBUILDS.ORG

;;;THOUGH IN THE PUBLIC DOMAIN, THIS CODE IS PROTECTED BY MAGIC.  THE AUTHOR OF THE CODE PRACTICES AN ACIENT ART CALLED INNOCENCE: MAGIC PROTECTING INNOCENCE IS NATURAL, AND BEYOND THE AUTHOR'S CONTROL,HOWEVER IT HAS BEEN OBSERVERED THAT USERS OF THIS CODE FREQUENTLY TURN INTO HIPPIES.  THEREFORE IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY CLAIM, DAMAGES OR ANY OTHER LIABILITY ARISING FROM, OUT OF, OR IN CONNECTION TO USE OF THE AUTHOR'S CODE.  READ THIS AGAIN AT HTTPS://PROTECTED.BY.MAGIC.LOL

;; initialize quicklisp (quicklisp should already have been installed (see the README-SBOMG))
#-quicklisp
(let ((quicklisp-init (merge-pathnames "quicklisp/setup.lisp"
                                       (user-homedir-pathname))))
  (when (probe-file quicklisp-init)
    (load quicklisp-init)))

;;; load external common lisp libraries
(ql:quickload "inferior-shell")
(ql:quickload "uiop")

;; sync sbopkg
(print "SYNCING SBOPKG")
(inferior-shell:run/i (format nil "sbopkg -r"))


;;; simulate cli arguments
;(setf sb-ext:*posix-argv* (list "sbcl" "avahi" "nexuiz"))


;;; following function builds packages in order listed in queue files generated by sqg, and cleans slackware between each queue file.  Packages with no dependencies are usually skipped by sqg:  therefore, /usr/sbin/sqg needs this behavior altered, by uncommenting the line SKIP_EMPTY=${SKIP_EMPTY:-NO} before loading sbomg.lisp   
(defun build-packages-in-queues ()
  (let ((packages-in-queues (if (eql nil (cdr sb-ext:*posix-argv*))
				(list '|adoptopenjdk| '|android-tools| '|avahi| '|julius| '|nexuiz| '|nginx| '|projectM| '|simon|); <-- ADD YOUR SBO PACKAGES TO THIS LIST, preserving its syntax of a blank space, followed by a single quote, followed by the sbo package name wrapped in absolute value signs (pipes).  The single quote tells lisp not to evaluate yet, you're just making the list, and the absolute value signs tell lisp that the symbol name is case sensitive  
				(mapcar #'(lambda (x)(intern (format nil "~a" x))) (cdr sb-ext:*posix-argv*)))))

				(progn

      (loop for package in (mapcar #'symbol-name packages-in-queues)
	    if (eql nil (remove-if-not (lambda (it)
					 (search package (namestring it)))
				       (uiop:directory-files "/tmp/")))
	      do (progn
		   (print (format nil "~@:(~a~) NOT FOUND IN /TMP, SO: ~%BUILDING QUEUE FILE FOR ~@:(~a~)" package package))
		   (sleep (/ 1 3))		   
		   (inferior-shell:run/i (format nil "/usr/sbin/sqg -p ~a" package))		   
		   (let ((qfile (uiop:read-file-lines (format nil "/var/lib/sbopkg/queues/~a.sqf" package))))
		     (progn
		       (delete-file (format nil "/var/lib/sbopkg/queues/~a.sqf" package))
		       (loop for qpak in qfile 
			     if (eql nil (remove-if-not (lambda (it)
							  (search qpak (namestring it)))
							(uiop:directory-files "/tmp/")))
			       do (inferior-shell:run/i (format nil "MAKEOPTS=-j$(nproc) sbopkg -Bki ~a && sync" qpak))
			     else do (inferior-shell:run/i (format nil "installpkg /tmp/~a*.t?z && sync" qpak)))
		       (inferior-shell:run/i "slackpkg clean-system"))))
	    else do (progn
		      (print (format nil "~@:(~a~) HAS ALREADY BEEN BUILT:  SKIPPING" package))
		      (sleep (/ 1 3))))
      (print (format nil "DONE BUILDING 3RD PARTY PACKAGES FROM SBOPKG~%")))))

;; call the function defined above
(build-packages-in-queues)

;;; that's all folks
(quit)
