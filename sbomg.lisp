;;#!/usr/bin/clisp

;;; SBOMG.LISP -- A LISPY WAY TO MAINTAIN 3RD PARTY PACKAGES AVAILABLE AT SLACKBUILDS.ORG

;;;  THIS CODE IS PROTECTED BY MAGIC:  WORTHY USERS MAY SAFELY USE, MODIFY, AND REDISTRIBUTE THIS MAGICALLY PROTECTED CODE.  UNWORTHY USERS SUFFER INEXPLICABLE MISFORTUNE AND WILL BE WONDERING WHY THEY STEPPED IN STINKY DUNG WHEN THEY GOT OUT TO CHANGE THE THIRD FLAT TIRE IN A WEEK, OR OTHER SUCH JINXES, LIKE OOZING STINKY GENITALIA, OR MYSTERIOUS ACCIDENTAL FATALITIES THAT NOBODY WOULD EVER BELIEVE COULD HAVE BEEN CAUSED BY UNWORTHY USE OF MAGICALLY PROTECTED SOFTWARE.  THE AUTHOR OF THIS CODE ASSUMES NO RESPONSIBILITY FOR THE BAD KARMA OF UNWORTHY USERS, AND CANNOT BE HELD LIABLE OR ACCOUNTABLE FOR ANY CONSEQUENCES OF THEIR UNWORTHY DEEDS.  FOR MORE INFORMATION VISIT HTTPS://PROTECTED.BY.MAGIC.LOL

;;; LOAD LISP SYSTEMS ;;;;
(ql:quickload "inferior-shell")
(ql:quickload "uiop")

;;; keeping it simple:  gonna build packages without dependencies first -- then packages with dependencies, in order of increased levels of dependencies

(defun build-packages-without-dependencies ()
  (let
      (
       (packages-without-dependencies (list '|alabaster| '|celt| '|double-conversion| '|easyrsa| '|faac| '|faad2| '|freealut| '|ftgl| '|gcab| '|gdl| '|genshi| '|gnome-mime-data| '|google-apputils| '|gphotofs| '|graphviz| '|gsm| '|gtest| '|gts| '|jack| '|jsoncpp| '|imagesize| '|imlib2| '|irrlicht| '|ladspa_sdk| '|libavc1394| '|libconfig| '|libcuefile| '|libdaemon| '|libdbus-c++| '|libdc1394| '|libdca| '|libdvbpsi| '|libdvdcss| '|libebml| '|libiec61883| '|libkate| '|libminizip| '|libmms| '|libmodplug| '|libmpdclient| '|libmpeg2| '|libnfs| '|libreoffice| '|libmms| '|libreplaygain| '|libseccomp| '|libshout| '|libsidplay2| '|libsrtp| '|libtar| '|libtorrent| '|libupnp| '|lxml| '|libxml++| '|live555| '|lua| '|MarkupSafe| '|MasterPDFEditor| '|mbedtls| '|minidlna| '|mm-common| '|mpd| '|mu| '|nexuiz| '|nginx| '|numpy3| '|opencolorio| '|ORBit2| '|ostree| '|perl-Cstools| '|perl-File-Slurp| '|perl-Unicode-Map| '|perl-Unicode-String| '|postgresql| '|potrace| '|protobuf3| '|pybind11| '|python-gflags| '|python-mpd| '|python-webencodings| '|python3-attrs| '|PyStemmer| '|pytz| '|robin-map| '|sbsigntools| '|schroedinger| '|SDL_Pango| '|setuptools-scm| '|snappy| '|sphinxcontrib-applehelp| '|sphinxcontrib-devhelp| '|sphinxcontrib-htmlhelp| '|sphinxcontrib-jsmath| '|sphinxcontrib-qthelp| '|sphinxcontrib-serializinghtml| '|tbb| '|texlive-extra| '|twolame| '|u-boot-tools| '|valgrind| '|vcdimager| '|x264| '|x265| '|yajl| '|zoom-linux| '|zvbi|)))
    (loop for package in (mapcar #'symbol-name packages-without-dependencies)
	  if (eql nil (remove-if-not (lambda (it)
				       (search package (namestring it)))
				     (uiop:directory-files "/tmp/")))
	    do (inferior-shell:run/i (format nil "MAKEOPTS=-j$(nproc) sbopkg -Bkb ~a && sync " package)) ; using -b to build packages without installing
	  else do (progn (print (format nil " ~a already exists in /tmp and is being skipped" package))(sleep (/ 1 8))))))


(build-packages-without-dependencies)

;;; keeping it simple:  build packages in order listed in queue files generated by sqg, and clean slackware between each queue file.

(defun build-packages-in-queues ()
  (let ((packages-in-queues (list '|android-tools| '|avahi| '|appstream-glib| '|projectM|)))
    (progn
      (loop for package in (mapcar #'symbol-name packages-in-queues)
	    if (eql nil (remove-if-not (lambda (it)
					 (search package (namestring it)))
				       (uiop:directory-files "/tmp/")))
	      do (progn
		   (print (format nil "~a not found in /tmp, so proceeding to build the package: " package))
		   (sleep 3)
		   (print (format nil "Building quefile for ~a" package))
		   (sleep 3)
		   (inferior-shell:run/i (format nil "/usr/sbin/sqg -p ~a" package))
		   (sleep 5)
		   (let ((qfile (uiop:read-file-lines (format nil "/var/lib/sbopkg/queues/~a.sqf" package))))
		     (progn
		       (delete-file (format nil "/var/lib/sbopkg/queues/~a.sqf" package))
		       (loop for qpak in qfile 
			     if (eql nil (remove-if-not (lambda (it)
							  (search qpak (namestring it)))
							(uiop:directory-files "/tmp/")))
			       do (inferior-shell:run/i (format nil "MAKEOPTS=-j$(nproc) sbopkg -Bki ~a && sync" qpak))
			     else do (inferior-shell:run/i (format nil "installpkg /tmp/~a*.t?z && sync" qpak)))
		       (inferior-shell:run/i "slackpkg clean-system"))))
	    else do (progn
		      (print (format nil "~a has  already been built!  Skipping" package))
		      (sleep (/ 1 4))))
      (print (format nil "DONE BUILDING 3RD PARTY PACKAGES FROM SBOPKG~%")))))

(build-packages-in-queues)


;;; that's all folks

(cl-user:quit)
